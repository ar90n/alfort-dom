# derived from https://github.com/pyodide/pyodide/blob/main/src/py/_pyodide/_core_docs.py

from io import IOBase
from typing import Any, Callable, Iterable

class JsProxy(Any):
    def object_entries(self) -> "JsProxy": ...
    def object_keys(self) -> "JsProxy": ...
    def object_values(self) -> "JsProxy": ...
    def new(self, *args: Any, **kwargs: Any) -> "JsProxy": ...
    def to_py(
        self,
        *,
        depth: int = ...,
        default_converter: (
            Callable[
                [
                    "JsProxy",
                    Callable[["JsProxy"], Any],
                    Callable[["JsProxy", Any], None],
                ],
                Any,
            ]
            | None
        ) = ...,
    ) -> Any: ...
    def then(
        self, onfulfilled: Callable[[Any], Any], onrejected: Callable[[Any], Any]
    ) -> "Promise": ...
    def catch(self, onrejected: Callable[[Any], Any]) -> "Promise": ...
    def finally_(self, onfinally: Callable[[Any], Any]) -> "Promise": ...
    def assign(self, rhs: Any) -> None: ...
    def assign_to(self, to: Any) -> None: ...
    def to_memoryview(self) -> memoryview: ...
    def to_bytes(self) -> bytes: ...
    def to_file(self, file: IOBase) -> None: ...
    def from_file(self, file: IOBase) -> None: ...
    def _into_file(self, file: IOBase) -> None: ...
    def to_string(self, encoding: str | None = ...) -> str: ...

def create_once_callable(obj: Callable[[Any], Any]) -> JsProxy: ...
def create_proxy(obj: Any) -> JsProxy: ...
def to_js(
    obj: Any,
    *,
    depth: int = ...,
    pyproxies: JsProxy | None = ...,
    create_pyproxies: bool = ...,
    dict_converter: Callable[[Iterable[JsProxy]], JsProxy] | None = ...,
    default_converter: (
        Callable[
            [Any, Callable[[Any], JsProxy], Callable[[Any, JsProxy], None]], JsProxy
        ]
        | None
    ) = ...,
) -> JsProxy: ...

class Promise(JsProxy): ...

def destroy_proxies(pyproxies: JsProxy) -> None: ...
